import { Plugins } from '@capacitor/core';
import { notAvailable } from '../util/models';
import { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';
export const availableFeatures = {
    close: isFeatureAvailable('Browser', 'close'),
    open: isFeatureAvailable('Browser', 'open'),
    prefetch: isFeatureAvailable('Browser', 'prefetch')
};
export function useClose() {
    const { Browser } = Plugins;
    if (!availableFeatures.close) {
        return Object.assign({ close: featureNotAvailableError }, notAvailable);
    }
    return {
        close: Browser.close,
        isAvailable: true
    };
}
export function useOpen() {
    const { Browser } = Plugins;
    if (!availableFeatures.open) {
        return Object.assign({ open: featureNotAvailableError }, notAvailable);
    }
    return {
        open: Browser.open,
        isAvailable: true
    };
}
export function usePrefetch() {
    const { Browser } = Plugins;
    if (!availableFeatures.prefetch) {
        return Object.assign({ prefetch: featureNotAvailableError }, notAvailable);
    }
    return {
        prefetch: Browser.prefetch,
        isAvailable: true
    };
}
//# sourceMappingURL=useBrowser.js.map