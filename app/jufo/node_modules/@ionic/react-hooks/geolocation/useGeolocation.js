import { useState, useEffect } from 'react';
import { Plugins } from '@capacitor/core';
import { notAvailable } from '../util/models';
import { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';
;
;
export const availableFeatures = {
    getCurrentPosition: isFeatureAvailable('Geolocation', 'getCurrentPosition'),
    watchPosition: isFeatureAvailable('Geolocation', 'watchPosition')
};
export function useCurrentPosition(options, manual = false) {
    const { Geolocation } = Plugins;
    if (!availableFeatures.getCurrentPosition) {
        return Object.assign({ getPosition: featureNotAvailableError }, notAvailable);
    }
    const [currentPosition, setCurrentPosition] = useState();
    const [error, setError] = useState();
    const getPosition = async (newOptions) => {
        let called = false;
        // we use watchPosition here and grab the first result because getCurrentPosition currently has some issues
        const id = Geolocation.watchPosition(newOptions || options || {}, (pos, err) => {
            // watchPosition will sometimes fire updates quickly, 
            // so we check here to make sure its only called one per getPosition invocation
            if (!called) {
                if (err) {
                    setError(err);
                }
                setCurrentPosition(pos);
                // run on next tick so id will be defined
                setTimeout(() => Geolocation.clearWatch({ id }), 0);
                called = true;
            }
        });
    };
    useEffect(() => {
        if (!manual)
            getPosition(options);
    }, [options, manual]);
    return {
        error,
        currentPosition,
        getPosition,
        isAvailable: true
    };
}
export function useWatchPosition() {
    const { Geolocation } = Plugins;
    if (!availableFeatures.watchPosition) {
        return Object.assign({ clearWatch: featureNotAvailableError, startWatch: featureNotAvailableError }, notAvailable);
    }
    const [currentPosition, setCurrentPosition] = useState();
    const [watchId, setWatchId] = useState('');
    const [error, setError] = useState();
    const clearWatch = () => {
        if (watchId) {
            Geolocation.clearWatch({ id: watchId });
            setWatchId('');
        }
    };
    const startWatch = (options) => {
        if (!watchId) {
            const id = Geolocation.watchPosition(options || {}, (pos, err) => {
                if (err) {
                    setError(err);
                }
                setCurrentPosition(pos);
            });
            setWatchId(id);
        }
    };
    return {
        error,
        currentPosition,
        clearWatch,
        startWatch,
        isAvailable: true
    };
}
//# sourceMappingURL=useGeolocation.js.map