import { useState, useEffect } from 'react';
import { Plugins } from '@capacitor/core';
import { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';
import { notAvailable } from '../util/models';
export const availableFeatures = {
    isScreenReaderAvailable: isFeatureAvailable('Accessibility', 'isScreenReaderAvailable'),
    speak: isFeatureAvailable('Accessibility', 'speak')
};
export function useIsScreenReaderEnabled() {
    const { Accessibility } = Plugins;
    if (!availableFeatures.isScreenReaderAvailable) {
        return notAvailable;
    }
    const [isScreenReaderEnabled, setIsScreenReaderAvailable] = useState();
    useEffect(() => {
        async function checkScreenReader() {
            const isEnabled = await Accessibility.isScreenReaderEnabled();
            setIsScreenReaderAvailable(isEnabled.value);
        }
        if (availableFeatures.isScreenReaderAvailable) {
            checkScreenReader();
        }
    }, [Accessibility, setIsScreenReaderAvailable]);
    return {
        isScreenReaderEnabled,
        isAvailable: true
    };
}
export function useSpeak() {
    const { Accessibility } = Plugins;
    if (!availableFeatures.speak) {
        return Object.assign({ speak: featureNotAvailableError }, notAvailable);
    }
    return {
        speak: Accessibility.speak,
        isAvailable: true
    };
}
//# sourceMappingURL=useAccessibility.js.map