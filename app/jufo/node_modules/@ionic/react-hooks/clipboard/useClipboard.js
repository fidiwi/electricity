import { useState } from 'react';
import { Plugins } from '@capacitor/core';
import { notAvailable } from '../util/models';
import { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';
export const availableFeatures = {
    useClipboard: isFeatureAvailable('Clipboard', 'useClipboard')
};
export function useClipboard() {
    const { Clipboard } = Plugins;
    if (!(availableFeatures.useClipboard)) {
        return Object.assign({ getValue: featureNotAvailableError, setValue: featureNotAvailableError }, notAvailable);
    }
    const [data, setData] = useState();
    async function getValue() {
        const ret = await Clipboard.read({
            type: 'string'
        });
        setData(ret.value);
    }
    async function setValue(value) {
        await Clipboard.write({
            string: value
        });
    }
    return {
        value: data,
        getValue,
        setValue,
        isAvailable: true
    };
}
//# sourceMappingURL=useClipboard.js.map