import { useState, useEffect } from 'react';
import { Plugins } from '@capacitor/core';
import { notAvailable } from '../util/models';
import { isFeatureAvailable } from '../util/feature-check';
export const availableFeatures = {
    getStatus: isFeatureAvailable('Network', 'getStatus')
};
export function useStatus() {
    const { Network } = Plugins;
    if (!availableFeatures.getStatus) {
        return notAvailable;
    }
    const [networkStatus, setStatus] = useState();
    useEffect(() => {
        async function getStatus() {
            const status = await Network.getStatus();
            setStatus(status);
        }
        getStatus();
    }, [Network, setStatus]);
    useEffect(() => {
        const listener = Network.addListener('networkStatusChange', (status) => {
            setStatus(status);
        });
        return () => listener.remove();
    }, [Network, setStatus]);
    return {
        networkStatus,
        isAvailable: true
    };
}
//# sourceMappingURL=useNetwork.js.map