import { Capacitor } from '@capacitor/core';
import { FeatureNotAvailableError } from './models';
const allTrue = {
    web: true,
    ios: true,
    android: true,
    electron: true
};
const featureMap = {
    Accessibility: {
        isScreenReaderAvailable: Object.assign(Object.assign({}, allTrue), { web: false }),
        speak: {
            web: 'speechSynthesis' in window,
            ios: true,
            android: true,
            electron: true
        }
    },
    App: {
        state: allTrue,
        getLaunchUrl: Object.assign(Object.assign({}, allTrue), { web: false }),
        appUrlOpen: Object.assign(Object.assign({}, allTrue), { web: false })
    },
    Browser: {
        open: allTrue,
        prefetch: Object.assign(Object.assign({}, allTrue), { web: false }),
        close: Object.assign(Object.assign({}, allTrue), { web: false })
    },
    Camera: {
        getPhoto: allTrue
    },
    Clipboard: {
        useClipboard: Object.assign(Object.assign({}, allTrue), { web: 'clipboard' in navigator }),
    },
    Device: {
        getInfo: allTrue,
        getLanguageCode: allTrue
    },
    FileSystem: {
        useFileSystem: allTrue
    },
    Geolocation: {
        getCurrentPosition: Object.assign(Object.assign({}, allTrue), { web: 'geolocation' in navigator }),
        watchPosition: Object.assign(Object.assign({}, allTrue), { web: 'geolocation' in navigator })
    },
    Network: {
        getStatus: allTrue
    },
    Platform: {
        getPlatform: allTrue
    },
    Storage: {
        useStorage: allTrue,
    }
};
export function isFeatureAvailable(plugin, method) {
    if (Capacitor.isPluginAvailable(plugin) && !!featureMap[plugin][method][Capacitor.platform]) {
        return true;
    }
    return false;
}
export function featureNotAvailableError() {
    throw new FeatureNotAvailableError();
}
//# sourceMappingURL=feature-check.js.map