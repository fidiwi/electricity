// Inspired by useLocalStorage from https://usehooks.com/useLocalStorage/
import { useState, useEffect, useCallback } from 'react';
import { Plugins } from '@capacitor/core';
import { notAvailable } from '../util/models';
import { isFeatureAvailable, featureNotAvailableError } from '../util/feature-check';
export const availableFeatures = {
    useStorage: isFeatureAvailable('Storage', 'useStorage')
};
export function useStorage() {
    const { Storage } = Plugins;
    if (!availableFeatures.useStorage) {
        return Object.assign({ get: featureNotAvailableError, set: featureNotAvailableError, remove: featureNotAvailableError, getKeys: featureNotAvailableError, clear: featureNotAvailableError }, notAvailable);
    }
    const get = useCallback(async (key) => {
        const v = await Storage.get({ key });
        if (v) {
            return v.value;
        }
        return null;
    }, []);
    const set = useCallback((key, value) => {
        return Storage.set({ key, value: value });
    }, []);
    const remove = useCallback((key) => {
        return Storage.remove({ key });
    }, []);
    const getKeys = useCallback(() => {
        return Storage.keys();
    }, []);
    const clear = useCallback(() => {
        return Storage.clear();
    }, []);
    return { get, set, remove, getKeys, clear, isAvailable: true };
}
export function useStorageItem(key, initialValue) {
    const { Storage } = Plugins;
    if (!availableFeatures.useStorage) {
        return [
            undefined,
            featureNotAvailableError,
            false
        ];
    }
    const [storedValue, setStoredValue] = useState();
    useEffect(() => {
        async function loadValue() {
            try {
                const result = await Storage.get({ key });
                if (result.value == undefined && initialValue != undefined) {
                    result.value = typeof initialValue === "string" ? initialValue : JSON.stringify(initialValue);
                    setValue(result.value);
                }
                else {
                    setStoredValue(typeof result.value === 'string' ? result.value : JSON.parse(result.value));
                }
            }
            catch (e) {
                return initialValue;
            }
        }
        loadValue();
    }, [Storage, setStoredValue, initialValue, key]);
    const setValue = async (value) => {
        try {
            setStoredValue(value);
            await Storage.set({ key, value: typeof value === "string" ? value : JSON.stringify(value) });
        }
        catch (e) {
            console.error(e);
        }
    };
    return [
        storedValue,
        setValue,
        true
    ];
}
//# sourceMappingURL=useStorage.js.map